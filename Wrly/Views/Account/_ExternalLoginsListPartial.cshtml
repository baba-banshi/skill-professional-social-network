@using Microsoft.Owin.Security
@{
    var loginProviders = Context.GetOwinContext().Authentication.GetExternalAuthenticationTypes();
    string action = "ExternalLogin"; //ActionToExecute;
    string returnUrl = "";
    using (Html.BeginForm(action, "Account", new { ReturnUrl = returnUrl }))
    {
        if (ViewBag.SocialLoginMessage != null)
        {
            <h3 class="social-media-login-message">@ViewBag.SocialLoginMessage</h3>
        }
        else
        {
            <h3 class="social-media-login-message">Login using existing social account:</h3>
        }
        @Html.AntiForgeryToken()
        <div id="socialLoginList">
            @foreach (AuthenticationDescription p in loginProviders)
            {
                if (p.AuthenticationType.Equals("google", StringComparison.InvariantCultureIgnoreCase))
                {
                    <button type="submit" class="btn btn-google ripple" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Use your @p.Caption account">@p.AuthenticationType <span class="impacted"> G+</span></button>
                }
                else if (p.AuthenticationType.Equals("facebook", StringComparison.InvariantCultureIgnoreCase))
                {
                    <button type="submit" class="btn btn-facebook ripple" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account">@p.AuthenticationType <span class="impacted"> f</span></button>
                }
                else if (p.AuthenticationType.Equals("facebook", StringComparison.InvariantCultureIgnoreCase))
                {
                    <button type="submit" class="btn btn-twitter ripple" id="@p.AuthenticationType" name="provider" value="@p.AuthenticationType" title="Log in using your @p.Caption account">@p.AuthenticationType <span class="impacted"> t</span></button>
                }
            }
        </div>
    }
}