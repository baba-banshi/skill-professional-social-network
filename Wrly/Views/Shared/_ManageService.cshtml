@model Wrly.Models.PublilcationViewModel

@using (Html.BeginForm("ManageService", "Award", FormMethod.Post, new { @class = "form-horizontal", role = "form", @id = "frmService", @onsubmit = "return manageService($(this))" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(c => c.Hash)
    @Html.HiddenFor(c => c.UserHash)
    <div class="form-group">
        <label class="control-label">Type of service(e.g: Outsoursing, Sevelopment, Staffing, Advertising etc.):</label>
        <div class="col-md-10">
            @Html.TextBoxFor(c => c.Name, new { @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        <label class="control-label">More about this service:</label>
        <div class="col-md-10">
            @Html.TextAreaFor(c => c.Description, new { @class = "form-control" })
        </div>
    </div>
    if (!Model.ShowExtendeFindingOptions)
    {
        <div class="text-right"><button type="button" class="link-alike" data-source-button="findingMoreDetails" onclick="showFindingMoreOption($(this))">Add the time you offer[ing/ed] this service</button> </div>
    }
    <fieldset id="findingMoreDetails" style="display:@(Model.ShowExtendeFindingOptions?"block":"none")">
        <legend class="form-group"><span class="control-label">Add time:</span></legend>
        <div class="form-group  inline-control">
            @if (!Model.IsPeriodMode)
            {
                <div>
                    <button type="button" onclick="swapeTimeMode(1)" id="btnSingle" class="link-alike">Change to period mode</button>
                    <button type="button" onclick="swapeTimeMode(2)" id="btnRange" style="display:none" class="link-alike">Change to single time</button>
                </div>
            }
            else
            {
                <div>
                    <button type="button" onclick="swapeTimeMode(1)" id="btnSingle" style="display:none" class="link-alike">Change to period mode</button>
                    <button type="button" onclick="swapeTimeMode(2)" id="btnRange" class="link-alike">Change to single time</button>
                </div>
            }
            <div id="fromLabel" style="display:@(Model.IsPeriodMode?"block":"none")">
                <label class="control-label">From:</label>
            </div>
            <div class="col-md-5">
                @Html.DropDownListFor(c => c.StartFromMonth, Model.MonthList, new { @class = "form-control" })
            </div>
            <div class="col-md-5">
                @Html.DropDownListFor(c => c.StartFromYear, Model.YearList, new { @class = "form-control" })
            </div>
        </div>
        <div id="dateRange" style="display:@(Model.IsPeriodMode?"block":"none")">
            <div><label class="control-label">To:</label></div>
            <div class="form-group  inline-control">
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.EndFromMonth, Model.MonthList, new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.EndFromYear, Model.YearList, new { @class = "form-control" })
                </div>
            </div>
        </div>
    </fieldset>
    if (!string.IsNullOrEmpty(Model.Hash))
    {
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-primary btn-sm" value="Save changes" />
                <a class="link-alike" onclick="return removeFormAndShowSource($('#frmService'), $('.finding-list .plus-add-profile-item'))" href="#">Back</a><div class="waiting-bg"></div>
            </div>
        </div>
    }
    else
    {
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" class="btn btn-primary btn-sm" value="Add service" />
                <a class="link-alike" onclick="return removeFormAndShowSource($('#frmService'), $('.finding-list .plus-add-profile-item'))" href="#">Back</a><div class="waiting-bg"></div>
            </div>
        </div>
    }

    <script>
        function showFindingMoreOption($obj) {
            var source = $obj.attr('data-source-button');
            $('#' + source).show();
            $obj.remove();
        }
        $(document).ready(function () {
            

            // Required another if selected one.
            $.validator.addMethod('requeiredifselected', function (value, element, params) {
                var otherPropValue = $('#' + params.otherproperty).val();
                //                console.log({ otherproperty: params.otherproperty, value: value, otherPropValue: otherPropValue });

                if (otherPropValue > 0 && (value == '' || value == -1)) {
                    return false;
                }
                return true;
            });

            $.validator.unobtrusive.adapters.add("requeiredifselected", ["otherproperty", "mode"], function (options) {
                options.rules["requeiredifselected"] = options.params;
                options.messages["requeiredifselected"] = options.message;
            });
            //=======================   End ================================//

            // Date validation
            $.validator.addMethod('cannotgreatermonthandyear', function (value, element, params) {
                var isStart = params.isstart;
                var isMonth = params.ismonth;
                var isYear = params.isyear;
                var otherPropertyYear = $('#' + params.otherpropertyyear).val();
                var otherPropertyMonth = $('#' + params.otherpropertymonth).val();
                var friendProperty = $('#' + params.friendproperty).val();


                //console.log({ isStart: isStart, isMonth: isMonth, isYear: isYear, otherPropertyYear: otherPropertyYear, otherPropertyMonth: otherPropertyMonth, friendProperty: friendProperty, value:value });
                var startDate = new Date();
                var endDate = new Date();
                if (otherPropertyMonth > 0 && otherPropertyYear > 0 && friendProperty > 0) {
                    if (isStart == 'True') {
                        if (isMonth == 'True') {
                            startDate = new Date(friendProperty, value, 1);
                        } else {
                            startDate = new Date(value, friendProperty, 1);
                        }
                        endDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                    } else {
                        if (isMonth.toString() == 'True' && friendProperty > 0) {
                            endDate = new Date(friendProperty, value, 1);
                        } else {
                            endDate = new Date(value, friendProperty, 1);
                        }
                        startDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                    }
                    console.log({ endDate: endDate, startDate: startDate });
                    return (endDate >= startDate);
                }
                return true;
            });

            $.validator.unobtrusive.adapters.add("cannotgreatermonthandyear", ["friendproperty", "otherpropertymonth", "otherpropertyyear", "isstart", "ismonth", "isyear"], function (options) {
                options.rules["cannotgreatermonthandyear"] = options.params;
                options.messages["cannotgreatermonthandyear"] = options.message;
            });
            //=======================   End ================================//


            $("form").data("validator", null);
            $.validator.unobtrusive.parse($("form"));
        })

        function ____removeTempMember($obj) {
            $obj.parent('.people-selected').remove();
        }
        function manageService($obj) {
            var ser = $obj.serialize();
            var action = $obj.attr('action');
            if ($obj.valid()) {
                $.ajax({
                    url: action,
                    waitingSelector: $obj.find('.waiting-bg'),
                    type: 'POST',
                    data: ser,
                    dataType: 'html',
                    success: function (response) {
                        $("#services-list").processTemplateURL("/award/services", null, { attachGlobalWait: true });
                        $obj.remove();
                    }
                });
            }
            return false;
        }

        function swapeTimeMode(mode) {
            if (mode == 1) {
                $('#dateRange').show();
                $('#fromLabel').show();
                $('#btnSingle').hide();
                $('#btnRange').show();
            } else {
                $('#dateRange').hide();
                $('#EndFromMonth').val(-1);
                $('#fromLabel').hide();
                $('#EndFromYear').val(-1);
                $('#btnSingle').show();
                $('#btnRange').hide();
            }
        }

        // custom validation

    </script>

}






