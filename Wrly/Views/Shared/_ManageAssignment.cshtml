@model Wrly.Models.AwardViewModel

@using (Html.BeginForm("ManageAssignment", "Award", FormMethod.Post, new { @id = "frmProject", @class = "form-horizontal", role = "form", @onsubmit = "return manageProjectHistory($(this))" }))
{
    <div class="profile-item">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(c => c.Hash)
        @Html.HiddenFor(c => c.UserHash)
        <div class="form-group">
            <label class="control-label">Assignment/project Name:</label>
            <div class="col-md-10">
                @Html.TextBoxFor(c => c.Name, new { @class = "form-control", @placeholder = "your assignment/project name" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Your role:</label>
            <div class="col-md-10">
                @Html.TextBoxFor(c => c.Role, new { @class = "form-control", @placeholder = "add your role" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Description of project/assignment:</label>
            <div class="col-md-10">
                @Html.TextAreaFor(c => c.Description, new { @class = "form-control", @placeholder = "write more about this project" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Position:</label>
            <div class="col-md-10">
                @Html.DropDownListFor(c => c.CareerHistoryID, Model.CareerHistoryList, new { @class = "form-control" })
            </div>
        </div>
        <fieldset>
            <legend class="control-label">Duration(Add time duration to your project/assignment):</legend>
            <div class="form-group  inline-control">
                @if (!Model.IsPeriodMode)
                {
                    <div>
                        <button type="button" onclick="swapeTimeMode(1)" id="btnSingle" class="link-alike">Change to period mode</button>
                        <button type="button" onclick="swapeTimeMode(2)" id="btnRange" style="display:none" class="link-alike">Change to single time</button>
                    </div>
                }
                else
                {
                    <div>
                        <button type="button" onclick="swapeTimeMode(1)" id="btnSingle" style="display:none" class="link-alike">Change to period mode</button>
                        <button type="button" onclick="swapeTimeMode(2)" id="btnRange" class="link-alike">Change to single time</button>
                    </div>
                }
                <div id="fromLabel" style="display:@(Model.IsPeriodMode?"block":"none")">
                    <label class="control-label">From:</label>
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.StartFromMonth, Model.MonthList, new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.StartFromYear, Model.YearList, new { @class = "form-control" })
                </div>
            </div>
            <div id="dateRange" style="display:@(Model.IsPeriodMode?"block":"none")">
                <div><label class="control-label">To:</label></div>
                <div class="form-group  inline-control">
                    <div class="col-md-5">
                        @Html.DropDownListFor(c => c.EndFromMonth, Model.MonthList, new { @class = "form-control" })
                    </div>
                    <div class="col-md-5">
                        @Html.DropDownListFor(c => c.EndFromYear, Model.YearList, new { @class = "form-control" })
                    </div>
                </div>
            </div>
        </fieldset>
        @if (!Model.AnySkill)
        {
            <div class="text-right"><button type="button" data-source-button="divProjectSkills" class="link-alike" onclick="showFindingMoreOption($(this))">Add skills to this accomplishment</button> </div>
        }

        <div class="form-group" id="divProjectSkills" style="display:@(Model.AnySkill ? "block" : "none")">
            <div class="col-md-10">
                @Html.TextBox("SkillListText", null, new { @id = "SkillListText", @placeholder = "Add your skills to this assignment", @class = "form-control" })
            </div>
        </div>
        @if (!Model.AnyTeamMember)
        {
            <div class="text-right"><button type="button" data-source-button="divProjectMembers" class="link-alike" onclick="showFindingMoreOption($(this))">Add your team members</button> </div>
        }
        <div class="form-group" id="divProjectMembers" style="display:@(Model.AnyTeamMember ? "block" : "none")">
            <div class="col-md-10" id="Participents">
                <label class="control-label">Add your team:</label>
                @Html.TextBox("ParticipentText", null, new { @id = "ParticipentText", @placeholder = "type your connection name to add as team", @class = "form-control" })
            </div>
        </div>
        @if (!string.IsNullOrEmpty(Model.Hash))
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" class="btn btn-primary btn-sm" value="Save changes" />
                    <a class="link-alike" onclick="return removeFormAndShowSource($('#frmProject'), $('.project-list .plus-add-profile-item'))" href="#">Back</a><div class="waiting-bg"></div>
                </div>
            </div>
        }
        else
        {
            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" class="btn btn-primary btn-sm" value="Add project" />
                    <a class="link-alike" onclick="return removeFormAndShowSource($('#frmProject'), $('.project-list .plus-add-profile-item'))" href="#">Back</a><div class="waiting-bg"></div>
                </div>
            </div>
        }
    </div>
}



<script>
    $(document).ready(function () {
        // Required another if selected one.
        $.validator.addMethod('requeiredifselected', function (value, element, params) {
            var otherPropValue = $('#' + params.otherproperty).val();
            //                console.log({ otherproperty: params.otherproperty, value: value, otherPropValue: otherPropValue });

            if (otherPropValue > 0 && (value == '' || value == -1)) {
                return false;
            }
            return true;
        });

        $.validator.unobtrusive.adapters.add("requeiredifselected", ["otherproperty", "mode"], function (options) {
            options.rules["requeiredifselected"] = options.params;
            options.messages["requeiredifselected"] = options.message;
        });
        //=======================   End ================================//

        // Date validation
        $.validator.addMethod('cannotgreatermonthandyear', function (value, element, params) {
            var isStart = params.isstart;
            var isMonth = params.ismonth;
            var isYear = params.isyear;
            var otherPropertyYear = $('#' + params.otherpropertyyear).val();
            var otherPropertyMonth = $('#' + params.otherpropertymonth).val();
            var friendProperty = $('#' + params.friendproperty).val();


            //console.log({ isStart: isStart, isMonth: isMonth, isYear: isYear, otherPropertyYear: otherPropertyYear, otherPropertyMonth: otherPropertyMonth, friendProperty: friendProperty, value:value });
            var startDate = new Date();
            var endDate = new Date();
            if (otherPropertyMonth > 0 && otherPropertyYear > 0 && friendProperty > 0) {
                if (isStart == 'True') {
                    if (isMonth == 'True') {
                        startDate = new Date(friendProperty, value, 1);
                    } else {
                        startDate = new Date(value, friendProperty, 1);
                    }
                    endDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                } else {
                    if (isMonth.toString() == 'True' && friendProperty > 0) {
                        endDate = new Date(friendProperty, value, 1);
                    } else {
                        endDate = new Date(value, friendProperty, 1);
                    }
                    startDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                }
                console.log({ endDate: endDate, startDate: startDate });
                return (endDate >= startDate);
            }
            return true;
        });

        $.validator.unobtrusive.adapters.add("cannotgreatermonthandyear", ["friendproperty", "otherpropertymonth", "otherpropertyyear", "isstart", "ismonth", "isyear"], function (options) {
            options.rules["cannotgreatermonthandyear"] = options.params;
            options.messages["cannotgreatermonthandyear"] = options.message;
        });
        //=======================   End ================================//

        $("form").data("validator", null);
        $.validator.unobtrusive.parse($("form"));
        var data = [];
        $("#SkillListText").autocomplete({
            minLength: 1,
            source: function (request, response) {
                isAutomComplete = true;
                $.ajax({
                    url: "/CareerHistory/SkillList",
                    data: { keyword: $("#SkillListText").val() },
                    dataType: "json",
                    type: "POST",
                    success: function (data) {
                        isAutomComplete = false;
                        if (data.length == 0) {
                            $("#SkillListText").removeClass('working');
                        }
                        response($.map
                        (data, function (obj) {
                            return {
                                label: obj.Value.toString().trim(),
                                value: obj.Value.toString().trim(),
                                id: obj.Key.toString().trim()
                            };
                        }));
                    },
                    error: function () { isAutomComplete = false; }
                });
            },
            select: function (event, ui) {
                $("#SkillListText").val('');
                //var element = '<div class="skill-tags"> ' + ui.item.label + ' <input type="hidden" name="Skills" value="' + ui.item.value.toString() + '" /></div>';

                if ($('input[data-val-name="' + ui.item.label + '"]').length == 0) {
                    var element = '<span class="skill-tag-editable"> ' + ui.item.label + ' <input type="hidden" name="Skills" value="' + ui.item.id.toString() + '" data-val-name="' + ui.item.label + '" /><span class="remove" onclick="removeTempSkillFromProject($(this))">X</span></span>';
                    $('#divProjectSkills').append(element.toString());
                }
                this.value = "";
                return false;
            }
        });

        var data = [];
        $("#ParticipentText").autocomplete({
            minLength: 1,
            source: function (request, response) {
                isAutomComplete = true;
                $.ajax({
                    url: "/Association/ConnectionHeads",
                    data: { keyword: $("#ParticipentText").val() },
                    dataType: "json",
                    type: "POST",
                    success: function (data) {
                        isAutomComplete = false;
                        if (data.length == 0) {
                            $("#ParticipentText").removeClass('working');
                        }
                        response($.map
                        (data, function (obj) {
                            return {
                                label: obj.FormatedName,
                                value: obj.FormatedName,
                                entityID: obj.EntityID.toString().trim(),
                                jobTitle: obj.ProfileHeading == null ? '' : obj.ProfileHeading,
                                profilePath: obj.ProfileIconPath == null ? '/content/images/no-image-sm.png' : obj.ProfileIconPath
                            };
                        }));
                    },
                    error: function () { isAutomComplete = false; }
                });
            },
            create: function () {
                $(this).data('ui-autocomplete')._renderItem = function (ul, item) {
                    return $('<li>').append('<div class="search-result-item"><div class="thumbnail-notification-con"><img class="thumbnail-notification" src="' + item.profilePath + '" alt="no image ' + item.label + ' "></div><div class="side-thumbnail"><h3>' + item.label + '</h3><span class="child-headings">' + item.jobTitle + '</span></div>     </div>').appendTo(ul);
                }
            },
            open: function () {
                $(this).autocomplete("widget").appendTo("#Participents");
            },
            select: function (event, ui) {
                var element = '<div class="people-selected"><span onclick="____removeTempMember($(this))" class="remove">X</span><input type="hidden" name="Participants" value="' + ui.item.entityID.toString() + '" /> <div class="thumbnail-notification-con"><img class="thumbnail-notification" src="' + ui.item.profilePath + '" alt="no image ' + ui.item.label + ' "></div><div class="side-thumbnail"><h3>' + ui.item.label + '</h3><span class="child-headings">' + ui.item.jobTitle + '</span></div>     </div>';
                $('#Participents').parent().find('.selected').append(element.toString());
                $('#Participents').append(element.toString());
                this.value = "";
                return false;
            }
        });
    })


    function removeTempSkillFromProject($obj) {
        $obj.parent('.skill-tag-editable').remove();
    }
    function manageProjectHistory($obj) {
        var ser = $obj.serialize();
        var action = $obj.attr('action');
        if ($obj.valid()) {
            $.ajax({
                url: action,
                type: 'POST',
                waitingSelector: $obj.find('.waiting-bg'),
                data: ser,
                dataType: 'html',
                success: function (response) {
                    if ($('#hdnImprovement').length == 1) {
                        ____callbackFromPopup(response, 'project');
                        return;
                    }
                    $('.project-list .plus-add-profile-item').show();
                    $("#project-history").processTemplateURL("/award/Assignments", null, { attachGlobalWait: true });
                    $obj.remove();
                    postEditAction();
                }
            });
        }
        return false;
    }


    function swapeTimeMode(mode) {
        if (mode == 1) {
            $('#dateRange').show();
            $('#fromLabel').show();
            $('#btnSingle').hide();
            $('#btnRange').show();
        } else {
            $('#dateRange').hide();
            $('#EndFromMonth').val(-1);
            $('#fromLabel').hide();
            $('#EndFromYear').val(-1);
            $('#btnSingle').show();
            $('#btnRange').hide();
        }
    }


</script>