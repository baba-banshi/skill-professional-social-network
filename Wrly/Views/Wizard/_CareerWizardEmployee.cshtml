@model Wrly.Models.CareerHistoryWizardViewModel
@using (Html.BeginForm("SetCareerOption", "Wizard", FormMethod.Post, new { @onsubmit = "return setCareerOption($(this))" }))
{
    @Html.HiddenFor(c => c.Hash)
    @Html.AntiForgeryToken()
    @Html.HiddenFor(c => c.OrganizationID)
    @Html.HiddenFor(c => c.UniversityID)
    @Html.Hidden("CareerStage", "1")
    @Html.HiddenFor(c => c.CourseID)
    <div class="content-section" id="divEmployement">
        <div class="form-group">
            <label class="control-label">Your job title:</label>
            <div class="col-md-10">
                @Html.TextBoxFor(c => c.JobTitleName, new { @class = "form-control" })
            </div>
        </div>
        <div class="form-group">
            <label class="control-label">Where do you work(Company):</label>
            <div class="col-md-10">
                @Html.TextBoxFor(c => c.OrganizationName, new { @class = "form-control" })
            </div>
        </div>
        @*<div class="form-group" id="divIndustry" style="display:none;">
            <label class="control-label">Industry:</label>
            <div class="col-md-10">
                @Html.TextBoxFor(c => c.IndustryName, new { @class = "form-control", @placeholder = "type the most suitable industry name you are working into" })
                <small class="child-headings">(Your profile industry help you to find most relavent stuffs like connections, opputunities, contents and feeds)</small>
            </div>
        </div>*@

        <div class="divDurationEmplyee" style="display:none;">
            Duration
            <div class="form-group inline-control">
                <label class="control-label">When did you started:</label>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.StartFromMonth, Model.MonthList, new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.StartFromYear, Model.YearList, new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                    @Html.CheckBoxFor(c => c.Working, new { @id = "chkWorking" })
                    <label for="chkWorking">I am Working here</label>
                </div>
            </div>
            <div class="form-group inline-control" id="employeementEndDuration" style="display:none;">
                <label class="control-label">When did you end here:</label>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.EndFromMonth, Model.MonthList, new { @class = "form-control" })
                </div>
                <div class="col-md-5">
                    @Html.DropDownListFor(c => c.EndFromYear, Model.YearList, new { @class = "form-control" })
                </div>
                <div>
                    @Html.RadioButtonFor(c => c.EmployementEndedStage, 3, new { @id = "rdoBreak" })<label for="rdoBreak">I am on Break</label>
                    @Html.RadioButtonFor(c => c.EmployementEndedStage, 4, new { @id = "rdoRetired" })<label for="rdoRetired">I am Retired</label>
                    @Html.RadioButtonFor(c => c.EmployementEndedStage, 5, new { @id = "rdoOppurtunity" })<label for="rdoOppurtunity">Looking for opportunity</label>
                </div>
            </div>
        </div>
    </div>
    <script>
        $(document).ready(function () {

            $.getJSON("/lookup/IndustryList", function (data) {
                var array = $.map(data, function (item) {
                    return {
                        label: item.Value,
                        value: item.Value
                    }
                });
                $("#IndustryName").autocomplete(
                {
                    source: array
                })
            });



            $("#OrganizationName").autocomplete({
                minLength: 1,
                source: function (request, response) {
                    isAutomComplete = true;
                    $.ajax({
                        url: "/Business/Search",
                        data: { key: $("#OrganizationName").val() },
                        dataType: "json",
                        type: "POST",
                        success: function (data) {
                            isAutomComplete = false;
                            if (data.length == 0) {
                                data.push({
                                    Key: -1,
                                    Value: $("#OrganizationName").val()
                                });
                                $("#OrganizationName").removeClass('working');
                            }
                            response($.map
                            (data, function (obj) {
                                return {
                                    label: obj.Value.toString().trim(),
                                    value: obj.Value.toString().trim(),
                                    id: obj.Key.toString().trim()
                                };
                            }));
                        },
                        error: function () { isAutomComplete = false; }
                    });
                },
                select: function (event, ui) {
                    $('#OrganizationID').val(ui.item.id);
                    $('.divDurationEmplyee').show();
                    //if (ui.item.id == -1) {
                    //    $('#divIndustry').show();
                    //} else {
                    //    $('#IndustryName').val(ui.item.label);
                    //}
                }
            });

            $('#OrganizationName').blur(function () {
                $('.divDurationEmplyee').show();
            });

            $("#JobTitleName").autocomplete({
                minLength: 1,
                source: function (request, response) {
                    isAutomComplete = true;
                    $.ajax({
                        url: "/CareerHistory/SearchJobTitle",
                        data: { key: $("#JobTitleName").val() },
                        dataType: "json",
                        type: "POST",
                        success: function (data) {
                            isAutomComplete = false;
                            if (data.length == 0) {
                                data.push({
                                    Key: -1,
                                    Value: $("#JobTitleName").val()
                                });
                                $("#JobTitleName").removeClass('working');
                            }
                            response($.map
                            (data, function (obj) {
                                return {
                                    label: obj.Value.toString().trim(),
                                    value: obj.Value.toString().trim(),
                                    id: obj.Key.toString().trim()
                                };
                            }));
                        },
                        error: function () { isAutomComplete = false; }
                    });
                },
                select: function (event, ui) {
                    $('#JobTitleID').val(ui.item.id);
                }
            });

            $('#chkWorking').click(function () {
                if (!$(this).is(':checked')) {
                    $('#employeementEndDuration').show();
                } else {
                    $('#employeementEndDuration').hide();
                }
            });

            $("form").data("validator", null);
            $.validator.unobtrusive.parse($("form"));
        });

        (function ($) {
            // Required another if selected one.
            $.validator.addMethod('requeiredifselected', function (value, element, params) {
                var otherPropValue = $('#' + params.otherproperty).val();
                var stageSelected = $('input[name="CareerStage"]:checked').val();
                if (params.mode == stageSelected && otherPropValue > 0 && (value == '' || value == -1)) {
                    return false;
                }
                return true;
            });

            $.validator.unobtrusive.adapters.add("requeiredifselected", ["otherproperty", "mode"], function (options) {
                options.rules["requeiredifselected"] = options.params;
                options.messages["requeiredifselected"] = options.message;
            });
            //=======================   End ================================//

            // Date validation
            $.validator.addMethod('cannotgreatermonthandyear', function (value, element, params) {
                var isStart = params.isstart;
                var isMonth = params.ismonth;
                var isYear = params.isyear;
                var otherPropertyYear = $('#' + params.otherpropertyyear).val();
                var otherPropertyMonth = $('#' + params.otherpropertymonth).val();
                var friendProperty = $('#' + params.friendproperty).val();
                var startDate = new Date();
                var endDate = new Date();
                //alert(otherPropertyMonth);
                //alert(otherPropertyYear);
                //alert(friendProperty);
                //alert(isStart);
                alert(isStart);
                if (otherPropertyMonth > 0 && otherPropertyYear > 0 && friendProperty > 0) {
                    if (isStart == true) {
                        if (isMonth == true) {
                            startDate = new Date(friendProperty, value, 1);
                        } else {
                            startDate = new Date(value, friendProperty, 1);
                        }
                        endDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                    } else {
                        if (isMonth == true && friendProperty > 0) {
                            endDate = new Date(friendProperty, value, 1);
                        } else {
                            endDate = new Date(value, friendProperty, 1);
                        }
                        startDate = new Date(otherPropertyYear, otherPropertyMonth, 1);
                    }
                    return (endDate >= startDate);
                }
                return true;
            });

            $.validator.unobtrusive.adapters.add("cannotgreatermonthandyear", ["friendproperty", "otherpropertymonth", "otherpropertyyear", "isstart", "ismonth", "isyear"], function (options) {
                options.rules["cannotgreatermonthandyear"] = options.params;
                options.messages["cannotgreatermonthandyear"] = options.message;
            });
            //=======================   End ================================//

            // Reuired if checked
            $.validator.addMethod("ifcheckedneedtoselect", function (value, element, params) {
                var isSelected = $('#' + params).is(':checked');
                if (isSelected == false && (value == '' || value == -1)) {
                    return false;
                }
                return true;
            });
            $.validator.unobtrusive.adapters.addSingleVal("ifcheckedneedtoselect", "otherproperty");
            //=======================   End ================================//
        }(jQuery));

    </script>
     <div class="form-group">
                                <button class="btn btn-primary btn-sm">Next</button> <div data-val-required="true">Bordered fields are required</div>
                            </div>
}